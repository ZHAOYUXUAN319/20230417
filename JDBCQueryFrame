/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jdbc;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import static jdk.nashorn.internal.runtime.Debug.id;

/**
 *
 * @author hangt
 */
public class JDBCQueryFrame extends javax.swing.JFrame {

    /**
     * Creates new form JDBCQueryFrame
     */
    public JDBCQueryFrame() {
        initComponents();
        //setLocationRelativeTo(null);
        ichiran();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnQuery = new javax.swing.JButton();
        delect = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "ranking"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        btnQuery.setText("一覧");
        btnQuery.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnQueryMouseClicked(evt);
            }
        });
        btnQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQueryActionPerformed(evt);
            }
        });

        delect.setText("削除");
        delect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delectActionPerformed(evt);
            }
        });

        jButton2.setText("新規");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 933, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(delect, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(116, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(delect, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(195, 195, 195))
        );

        pack();
    }// </editor-fold>                        


    private void btnQueryActionPerformed(java.awt.event.ActionEvent evt) {                                         
        ichiran();
    }                                        
    public void ichiran() {
        try {
            //这行代码是用于建立Java程序和数据库之间连接的代码。
            Connection conn = DriverManager
                    .getConnection(
                            "jdbc:postgresql://localhost:5434/postgres",
                            "postgres", "319333633");
            //在Java程序和数据库之间建立连接后，就可以使用Connection对象来创建一个Statement对象。Statement对象是用于执行SQL语句并返回结果的对象
            Statement state = conn.createStatement();
            //executeQuery()是Statement对象的一个方法，用于执行一个SQL查询语句并返回查询结果。
            ResultSet resultSet = state.executeQuery("SELECT * FROM countries ORDER BY id ASC;");
            //ResultSetMetaData是一个接口，用于描述ResultSet对象中列的元数据信息
            //这行代码是用于获取ResultSet对象的元数据（metadata）的代码。
//            ResultSetMetaData meta = resultSet.getMetaData();
//            for (int i = 1; i <= meta.getColumnCount(); ++i) {
//                System.out.println(meta.getColumnLabel(i));           }
            System.out.println("表示されました");
            //DefaultTableModel model = (DefaultTableModel) UpdateDialog.getModel();
            //model.setRowCount(0);

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            while (resultSet.next()) {
                Object id = resultSet.getObject("id");
                Object name = resultSet.getObject("name");
                Object ranking = resultSet.getObject("ranking");
                model.addRow(new Object[]{
                    //false, 
                    id, name, ranking
                });
            }
            conn.close();

        } catch (SQLException ex) {
            Logger.getLogger(JDBCQueryFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    private void btnQueryMouseClicked(java.awt.event.MouseEvent evt) {                                      

    }                                     

    private void delectActionPerformed(java.awt.event.ActionEvent evt) {                                       

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int row = jTable1.getSelectedRow();
        String id = model.getValueAt(row, 0).toString();
        try {

            Connection conn = DriverManager
                    .
                    getConnection(
                            "jdbc:postgresql://localhost:5434/postgres",
                            "postgres", "319333633");
            Statement query = conn.createStatement();
            //sql文を構築する
            StringBuffer sb = new StringBuffer();
            sb.append("delete from countries ");
            sb.append(" where ");
            sb.append(" id = '" + id + "'");
            sb.append(";");
            System.out.println(sb.toString());
            //sbを実行する
            query.execute(sb.toString());
            System.out.println("削除されました");
            conn.close();
        } catch (Exception ex) {
            Logger.getLogger(JDBCQueryFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        ichiran();


    }                                      

//evt は MouseEvent オブジェクト
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {                                     
        if (evt.getClickCount() != 2) {
            return;
        }
        
        //マウス選択したの行列の値をrowに渡す
        int row = jTable1.getSelectedRow();

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        Object id = model.getValueAt(row, 0);
        Object name = model.getValueAt(row, 1);
        Object ranking = model.getValueAt(row, 2);
        //取得したの値をUpdateDialogに渡す
        UpdateDialog dialog = new UpdateDialog(this, true, new Object[]{
            id, name, ranking
        });
        dialog.setVisible(true);
        System.out.println("保存されました");
        if (dialog.getReturnStatus() == 1) {
            btnQueryActionPerformed(null);
        }
    }                                    

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        new JDBCInsertFrame().setVisible(true);

    }                                        
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDBCQueryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDBCQueryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDBCQueryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDBCQueryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JDBCQueryFrame().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnQuery;
    private javax.swing.JButton delect;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration                   
}
